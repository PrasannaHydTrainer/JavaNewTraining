Object Oriented Programming : 

It is an approach, that provides a way of modularizing programming, 
that which can be used to create small partition memory area for 
both data and objects, which are to be used as templates for creating
copies of such modules on demand. 

Object : An object is a real world entity, that which provides
3 features as

	-> State
	
	-> Behaviour

	-> Identity 

OOPs features : 
_________________

	-> Encapsulation : Wrapping up of data and functions into
		single unit known as Encapsulation. 

	-> Abstraction : Hiding the irrelevant details of an object
		that do not contribute to its essential characterstics
		known as Abstraction. 

		*** Encapsulation focuses on showing the relevant
		details, where abstraction focuses on hiding the 
		irrelevant details ***

	-> Inheritance : Deriving a new entity from already existing
		entity, through inheritance, we can reduce the 
		size of the program. 

	-> Polymorphism : The ability to take more than one form 
		known as polymorphism. 

class : A class is a template or blueprint, that which contains 
	combination of data members and member functions.  Members
	of the class can be accessable by using instance of the class. 

class class_name
{
    data members;
    member functions;
}

Why Java : 
__________

	-> Platform Independence 

	-> Console, Windows, Web, Mobile, Service Oriented 

	-> Packages : Contains group of related classes and interfaces
		that which belongs to one common group, if you want
		 to overcome the naming conflicts between classes, then 
		we need the help of packages. 

Java Features : 
________________

	-> Simple : Java uses simple C/C++ syntaxes, as a programmer
	no need to take care of internal details like memory management etc
	as how much memory allocated to run the program, the same
	amount of the memory will be reallocated automatically. 

	-> Object Oriented : Java supports all object oriented 
		programming features. 

	-> Compiled and Interpreted : Java programs are compiled 
		first, during compilation java code will be 
		converted into bytecode, then .class file will 
		be created. In interpreation it reads the bytecode
		line by line and executes. 

	-> Portable : Ability to run the program without changing
		the source code, java programs are programs, that
		can run on any env, without changing the source 
		code. 

	-> Securable : Java implements various levels of security, as
		
		-> Compiler Level

		-> Bytecode Level

		-> Class Loader Level 

	-> Distributed : Java implements all distributed and robusts
		applications. 


Java Architecture : 
____________________

	-> Java Program (Java Code that which stored with extension
		.java)

	-> Java Class (Java Code after compilation its converted 
		into bytecode, then .class file will be created) 

	-> JVM (Java Virtual Machine) 

		It contains various components as 

			-> Class Loader : Used to load all classes
		which are required to run the program, as there are 
		2 types of class loaders known as 

				(a) Primordial Class loader

				(b) Class Loader Objects 

			-> JIT Compiler : Converts bytecode into
		CPU specific format. 

			-> Execution Manager : Contains QUEUE of 
		programs which are ready to run, where we can 
		execute the program. 

	-> Java API : It provides runtime env, that which allows you
		to run java program, as in this we have JDK and JRE

Access Modifiers : 
___________________

	-> private : Allows you to access members within current class. 

	-> public  : Allows you to access members in entire application. 

	-> protected : Allows you to access members within current/
		derived classes. 

	-> friendly : By default java possess friendly access modifier,
		allows you to access members in entire package. 


Data Types : 
____________

	There are 2 types of data types as

	(i) value types

		int, float, double, char, boolean, byte 

	(ii) reference types 

		String, Object and Custom Types

*** Value types will be stored in STACK memory and reference types will be
stored in HEAP memory ***


You can define method main() in java, as 

public static void main(String[] args) {
...
...
...
}

You can display any value or message as 

System.out.println() : Used to display any value or message. 

System -> class

out -> Console

println() -> Method. 

System.out.println("Welcome to Java Programming...");

You can create an object to the class, as 

class_name obj = new class_name();

Control Structures : 
_____________________

Used to define the flow of the program. 

 There are 2 types of control structures known as

	-> Branching Control Structures

		if...else : Executes the statements based on the condition.
	
		if(condition) {
		   statement(s);
		} else {
		   statement(s);
		}

	switch...case : used to define menu-driven programs. 

	switch(expression) {
		case expression1 : 
			statement(s);
			break;
		case expression2 : 
			statement(s);
			break;
		case expression3 : 
			statement(s);
			break;
		default : 
			statement(s);
	}
	-> Looping Control Structures 

	while loop : This loop executes all the statment(s) repeatedly until the condition remains true, if the condition remains false, then it comes out of the loop.  For every loop, basically there are 3 phases as 	

	(i) Initialization : Performed at the beginning of the loop.

	(ii) Condition : Performed at the conditional part of the loop.

	(iii) Increment/Decrement : Performed before closing the loop. 

while(condition) {
   statement(s);
}

for loop : Executes the statements based on the condition. 

for(initialization;condition;increment/decrement) {
   statement(s);
}






